# -*- coding: utf-8 -*-
"""
Module responsible for loading individual page images.

This module takes a file path (presumably to a temporary image file
generated by pdf_splitter) and loads it into a suitable format
for further processing (e.g., a PIL Image object). Includes logging.
"""

import os
import sys
import logging # Import logging
from PIL import Image, UnidentifiedImageError

# Get a logger instance for this module
logger = logging.getLogger(__name__)

def load_page_image(image_path: str) -> Image.Image | None:
    """
    Loads a page image from the specified file path.

    Args:
        image_path: The path to the image file (e.g., a temporary .webp file).

    Returns:
        A PIL Image object if loading is successful.

    Raises:
        FileNotFoundError: If the image_path does not exist or is not a file.
        UnidentifiedImageError: If the file cannot be opened as a valid image format by Pillow.
        Exception: For other potential OS or permission errors during file access.
    """
    logger.info(f"Attempting to load page image from: {image_path}")

    # Validate if the path exists and is a file
    if not os.path.isfile(image_path):
        error_msg = f"Image file not found or is not a file at path: {image_path}"
        logger.error(error_msg)
        raise FileNotFoundError(error_msg)

    try:
        # Open the image file using Pillow
        img = Image.open(image_path)
        # Load image data into memory immediately
        img.load()
        logger.info(f"Successfully loaded image: mode={img.mode}, size={img.size}")
        return img

    except UnidentifiedImageError as e:
        error_msg = f"Cannot identify image file. It might be corrupted or an unsupported format: {image_path}."
        logger.error(f"{error_msg} Error: {e}", exc_info=True) # Log traceback
        raise UnidentifiedImageError(error_msg) from e # Re-raise with context

    except Exception as e:
        error_msg = f"An unexpected error occurred loading image '{image_path}': {e}"
        logger.error(error_msg, exc_info=True) # Log traceback
        raise Exception(error_msg) from e # Re-raise other errors with context

# Example usage block (for testing when script is run directly)
if __name__ == "__main__":
    # Configure logging specifically for the test run if needed
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
    logger.info("--- Running loader.py directly for testing ---")

    test_image_dir = "temp_test_loader"
    os.makedirs(test_image_dir, exist_ok=True)
    test_image_path = os.path.join(test_image_dir, "test_loader_image.webp")
    invalid_image_path = os.path.join(test_image_dir, "invalid_image.txt")
    non_existent_path = os.path.join(test_image_dir, "non_existent_image.webp")

    try:
        # Create dummy files for testing
        if not os.path.exists(test_image_path):
            logger.info(f"Creating dummy test image: {test_image_path}")
            dummy_img = Image.new('RGB', (60, 30), color = 'blue')
            dummy_img.save(test_image_path, "webp", lossless=True)
            dummy_img.close()
        with open(invalid_image_path, "w") as f:
            f.write("This is not an image.")

        # --- Test Case 1: Load valid image ---
        logger.info(f"\nTesting loading valid image: {test_image_path}")
        loaded_image = load_page_image(test_image_path)
        if loaded_image:
            logger.info("Test load successful! Image details:")
            logger.info(f"  Format: {loaded_image.format}, Size: {loaded_image.size}, Mode: {loaded_image.mode}")
            loaded_image.close()
        else:
            logger.error("Test load failed unexpectedly (returned None).")

    except (FileNotFoundError, UnidentifiedImageError, Exception) as e:
         logger.error(f"Test Error for valid image: {e}", exc_info=True)

    # --- Test Case 2: Load non-existent file ---
    logger.info(f"\nTesting non-existent file: {non_existent_path}")
    try:
        load_page_image(non_existent_path)
        logger.error("Error: Expected FileNotFoundError but none was raised.")
    except FileNotFoundError:
        logger.info("Successfully caught FileNotFoundError (expected).")
    except Exception as e:
        logger.error(f"Caught unexpected error for non-existent file: {e}", exc_info=True)

    # --- Test Case 3: Load an invalid image file ---
    logger.info(f"\nTesting invalid image file: {invalid_image_path}")
    try:
        load_page_image(invalid_image_path)
        logger.error("Error: Expected UnidentifiedImageError but none was raised.")
    except UnidentifiedImageError:
        logger.info("Successfully caught UnidentifiedImageError (expected).")
    except Exception as e:
        logger.error(f"Caught unexpected error for invalid file: {e}", exc_info=True)

    finally:
        # Clean up dummy files and directory
        logger.info("\nCleaning up test files...")
        paths_to_remove = [test_image_path, invalid_image_path]
        for p in paths_to_remove:
            if os.path.exists(p):
                try:
                    os.remove(p)
                    logger.info(f"Removed: {p}")
                except OSError as e:
                    logger.warning(f"Error removing {p}: {e}")
        try:
            if os.path.exists(test_image_dir):
                os.rmdir(test_image_dir)
                logger.info(f"Removed test directory: {test_image_dir}")
        except OSError as e:
             logger.warning(f"Could not remove test directory {test_image_dir}: {e}")

    logger.info("--- Loader Test Complete ---")